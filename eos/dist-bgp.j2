router bgp {{ asn }}
 router-id {{ infra_ip }}
 no bgp default ipv4-unicast
 maximum-paths 2
 update wait-install
 {% for nei in bgp_ipv4_peers %}
 neighbor {{ nei.peer_ip }} remote-as {{ nei.peer_asn }}
 neighbor {{ nei.peer_ip }} description {{ nei.peer_hostname }}
 {% endfor %}
 {% for nei in bgp_evpn_peers %}
 neighbor {{ nei.peer_infra_lo }} remote-as {{ nei.peer_asn }}
 neighbor {{ nei.peer_infra_lo }} description {{ nei.peer_hostname }}
 neighbor {{ nei.peer_infra_lo }} update-source Loopback0
 neighbor {{ nei.peer_infra_lo }} ebgp-multihop 3
 neighbor {{ nei.peer_infra_lo }} send-community
 neighbor {{ nei.peer_infra_lo }} bfd
 neighbor {{ nei.peer_infra_lo }} maximum-routes 0
 {% endfor %}
!
 address-family ipv4
   {% for nei in bgp_ipv4_peers %}
   neighbor {{ nei.peer_ip }} activate
   {% endfor %}
   network {{ infra_ipif }}
 !
 address-family evpn
   {% for nei in bgp_evpn_peers %}
   neighbor {{ nei.peer_infra_lo }} activate
   neighbor {{ nei.peer_infra_lo }} next-hop-unchanged
   {% endfor %}
 !
  {% for vxlan_name, vxlan_data in vxlans.items() %}
  vlan {{ vxlan_data.vlan_id }}
  rd {{ infra_ip }}:{{ vxlan_data.vlan_id }}
  route-target both 1:{{ vxlan_data.vlan_id }}
  redistribute learned
  {% endfor %}
!
  {% for mgmtdom in mgmtdomains %}
  vlan {{ mgmtdom.vlan }}
  rd {{ infra_ip }}:{{ mgmtdom.vlan }}
  route-target both 1:{{ mgmtdom.vlan }}
  redistribute learned
  {% endfor %}
!
  {% for vrf in vrfs %}
  vrf {{ vrf.name }}
  rd {{ infra_ip }}:{{ vrf.vrf_id }}
  route-target export evpn 2:{{ vrf.vrf_id }}
  route-target import evpn 2:{{ vrf.vrf_id }}
  {% for export_route_target in vrf.export_route_targets %}
  route-target export evpn {{ export_route_target }}
  {% endfor %}
  {% for import_route_target in vrf.import_route_targets %}
  route-target export evpn {{ import_route_target }}
  {% endfor %}
  {% if (vrf.export_policy is defined) and vrf.export_policy %}
  route-target export evpn route-map {{ vrf.export_policy }}
  {% endif %}
  {% if (vrf.import_policy is defined) and vrf.import_policy %}
  route-target import evpn route-map {{ vrf.import_policy }}
  {% endif %}
  redistribute connected
  redistribute static

{# BGP inside VRF #}
   {% if (extroute_bgp is defined) and extroute_bgp %}
    {% if (extroute_bgp.vrfs | selectattr("name", "equalto", vrf.name) | list | length) == 1 %}
     {% set bgp_vrf = extroute_bgp.vrfs | selectattr("name", "equalto", vrf.name) | first %}
     local-as {{ bgp_vrf.local_as }}
     {% for nei in bgp_vrf.neighbor_v4 %}
      neighbor {{ nei.peer_ipv4 }} remote-as {{ nei.peer_as }}
      neighbor {{ nei.peer_ipv4 }} route-map {{ nei.route_map_in }} in
      neighbor {{ nei.peer_ipv4 }} route-map {{ nei.route_map_out }} out
      neighbor {{ nei.peer_ipv4 }} maximum-routes 12000
      neighbor {{ nei.peer_ipv4 }} description {{ nei.description }}
      address-family ipv4
        neighbor {{ nei.peer_ipv4 }} activate
     {% endfor %}
    {% endif %}
   {% endif %}
{# BGP inside VRF slut #}

  {% endfor %}

{# find a better place to put route-maps #}
ip prefix-list default-in
   seq 10 permit 0.0.0.0/0
!
ip prefix-list larger_than_32
   seq 10 permit 0.0.0.0/0 le 31
!
route-map default-only-in permit 10
   match ip address prefix-list default-in
!
route-map vrf_prefixes-out permit 10
   match ip address prefix-list larger_than_32
!
route-map vrf_prefixes-out permit 20
   match source-protocol connected
!
route-map vrf_prefixes-out permit 30
   match source-protocol static
!
route-map vrf_prefixes-out deny 1000
!
ip prefix-list mgmt-in
   seq 10 permit 10.101.100.0/24
   seq 20 permit 192.168.222.0/24
!
ip prefix-list mgmt-out
   seq 10 permit 10.101.2.0/24
   seq 20 permit 10.101.3.0/24
   seq 30 permit 10.101.4.0/24
   seq 40 permit 192.168.0.0/24
   seq 50 permit 192.168.2.0/24
   seq 60 permit 192.168.222.0/24
   seq 70 permit 192.168.223.0/24
   seq 80 permit 10.101.100.0/24
!
route-map mgmt-in permit 10
   match ip address prefix-list mgmt-in
!
route-map mgmt-out permit 10
   match ip address prefix-list mgmt-out
!
